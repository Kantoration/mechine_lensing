[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "gravitational-lens-classification"
dynamic = ["version"]
description = "Deep learning pipeline for gravitational lens detection in astronomical images"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Kantoration", email = "kantoration@example.com"}
]
maintainers = [
    {name = "Kantoration", email = "kantoration@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
keywords = [
    "gravitational lensing",
    "deep learning", 
    "computer vision",
    "astronomy",
    "pytorch",
    "ensemble learning",
    "vision transformer",
    "resnet"
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "Pillow>=8.3.0",
    "imageio>=2.9.0",
    "PyYAML>=6.0",
    "tqdm>=4.62.0",
    "matplotlib>=3.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=2.5.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "isort>=5.10.0",
    "mypy>=0.950",
    "pre-commit>=2.20.0",
]
cloud = [
    "boto3>=1.24.0",
    "google-cloud-storage>=2.5.0",
    "azure-storage-blob>=12.12.0",
]
viz = [
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "jupyterlab>=3.4.0",
]
all = [
    "gravitational-lens-classification[dev,cloud,viz,jupyter]"
]

[project.urls]
Homepage = "https://github.com/Kantoration/mechine_lensing"
Repository = "https://github.com/Kantoration/mechine_lensing.git"
Documentation = "https://github.com/Kantoration/mechine_lensing/wiki"
"Bug Tracker" = "https://github.com/Kantoration/mechine_lensing/issues"

[project.scripts]
lens-train = "src.training.trainer:main"
lens-eval = "src.evaluation.evaluator:main"
lens-ensemble = "src.evaluation.ensemble_evaluator:main"
lens-generate = "scripts.utilities.generate_dataset:main"

[tool.setuptools_scm]
write_to = "src/_version.py"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "sklearn.*",
    "matplotlib.*",
    "PIL.*",
    "imageio.*",
    "tqdm.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]






